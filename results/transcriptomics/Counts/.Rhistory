sign.tests = ifelse(P.value < 0.05, 1, 0)
sum(sign.tests)
P.value = 1:100
for (i in 1:100){
males = rnorm(10,29,10)
females = rnorm(10,30,10)
P.value[i] = t.test(males,females)$p.value
}
sign.tests = ifelse(P.value < 0.05, 1, 0)
sum(sign.tests)
P.value = 1:100
for (i in 1:100){
males = rnorm(10,29,10)
females = rnorm(10,30,10)
P.value[i] = t.test(males,females)$p.value
}
sign.tests = ifelse(P.value < 0.05, 1, 0)
sum(sign.tests)
P.value = 1:100
for (i in 1:100){
males = rnorm(10,29,10)
females = rnorm(10,30,10)
P.value[i] = t.test(males,females)$p.value
}
sign.tests = ifelse(P.value < 0.05, 1, 0)
sum(sign.tests)
P.value = 1:100
for (i in 1:100){
males = rnorm(10,29,10)
females = rnorm(10,30,10)
P.value[i] = t.test(males,females)$p.value
p.adjust(P.value[i], "bonferroni")
}
sign.tests = ifelse(P.value < 0.05, 1, 0)
sum(sign.tests)
P.value = 1:100
for (i in 1:100){
males = rnorm(10,29,10)
females = rnorm(10,30,10)
P.value[i] = t.test(males,females)$p.value
p.adjust(P.value[i], "bonferroni")
}
sign.tests = ifelse(P.value < 0.05, 1, 0)
sum(sign.tests)
P.value = 1:100
for (i in 1:100){
males = rnorm(10,29,10)
females = rnorm(10,30,10)
P.value[i] = t.test(males,females)$p.value
p.adjust(P.value[i], "bonferroni")
}
sign.tests = ifelse(P.value < 0.05, 1, 0)
sum(sign.tests)
P.value = 1:100
for (i in 1:100){
males = rnorm(10,29,10)
females = rnorm(10,30,10)
P.value[i] = t.test(males,females)$p.value
p.adjust(P.value[i], "bonferroni")
}
sign.tests = ifelse(P.value < 0.05, 1, 0)
sum(sign.tests)
P.value = 1:100
for (i in 1:100){
males = rnorm(10,29,10)
females = rnorm(10,30,10)
P.value[i] = t.test(males,females)$p.value
}
p.adjust(P.value, "bonferroni")
sign.tests = ifelse(P.value < 0.05, 1, 0)
sum(sign.tests)
P.value = 1:100
for (i in 1:100){
males = rnorm(10,29,10)
females = rnorm(10,30,10)
P.value[i] = t.test(males,females)$p.value
}
P.value
sign.tests = ifelse(P.value < 0.05, 1, 0)
sum(sign.tests)
P.value = 1:100
for (i in 1:100){
males = rnorm(10,29,10)
females = rnorm(10,30,10)
P.value[i] = t.test(males,females)$p.value
}
p.adjust(P.value, "bonferroni")
sign.tests = ifelse(P.value < 0.05, 1, 0)
sum(sign.tests)
P.value = 1:100
for (i in 1:100){
males = rnorm(1000,29,10)
females = rnorm(1000,30,10)
P.value[i] = t.test(males,females)$p.value
}
p.adjust(P.value, "bonferroni")
sign.tests = ifelse(P.value < 0.05, 1, 0)
sum(sign.tests)
P.value = 1:100
for (i in 1:100){
males = rnorm(1000,29,5)
females = rnorm(1000,30,5)
P.value[i] = t.test(males,females)$p.value
}
p.adjust(P.value, "bonferroni")
sign.tests = ifelse(P.value < 0.05, 1, 0)
sum(sign.tests)
P.value = 1:100
for (i in 1:100){
males = rnorm(1000,29,10)
females = rnorm(1000,30,10)
P.value[i] = t.test(males,females)$p.value
}
#p.adjust(P.value, "bonferroni")
sign.tests = ifelse(P.value < 0.05, 1, 0)
sum(sign.tests)
P.value = 1:100
for (i in 1:100){
males = rnorm(1000,29,10)
females = rnorm(1000,30,10)
P.value[i] = t.test(males,females)$p.value
}
p.adjust(P.value, "bonferroni")
sign.tests = ifelse(P.value < 0.05, 1, 0)
sum(sign.tests)
P.value = 1:100
for (i in 1:100){
males = rnorm(1000,29,10)
females = rnorm(1000,30,10)
P.value[i] = t.test(males,females)$p.value
}
#p.adjust(P.value, "bonferroni")
sign.tests = ifelse(P.value < 0.05, 1, 0)
sum(sign.tests)
P.value = 1:100
for (i in 1:100){
males = rnorm(1000,29,10)
females = rnorm(1000,30,10)
P.value[i] = t.test(males,females)$p.value
}
p.adjust(P.value, "bonferroni")
sign.tests = ifelse(P.value < 0.05, 1, 0)
sum(sign.tests)
p.adjust(P.value, "bonferroni")
P.value = 1:100
for (i in 1:100){
males = rnorm(10,29,10)
females = rnorm(10,30,10)
P.value[i] = t.test(males,females)$p.value
}
p.adjust(P.value, "bonferroni")
sign.tests = ifelse(P.value < 0.05, 1, 0)
sum(sign.tests)
#p.adjust(P.value, "bonferroni")
sign.tests = ifelse(P.value < 0.05, 1, 0)
P.value = 1:100
for (i in 1:100){
males = rnorm(10,29,10)
females = rnorm(10,30,10)
P.value[i] = t.test(males,females)$p.value
}
#p.adjust(P.value, "bonferroni")
sign.tests = ifelse(P.value < 0.05, 1, 0)
sum(sign.tests)
P.value = 1:100
for (i in 1:100){
males = rnorm(10,29,10)
females = rnorm(10,30,10)
P.value[i] = t.test(males,females)$p.value
}
#p.adjust(P.value, "bonferroni")
sign.tests = ifelse(P.value < 0.05, 1, 0)
sum(sign.tests)
P.value = 1:100
for (i in 1:100){
males = rnorm(10,29,10)
females = rnorm(10,30,10)
P.value[i] = t.test(males,females)$p.value
}
#p.adjust(P.value, "bonferroni")
sign.tests = ifelse(P.value < 0.05, 1, 0)
sum(sign.tests)
P.value = 1:100
for (i in 1:100){
males = rnorm(10,29,10)
females = rnorm(10,30,10)
P.value[i] = t.test(males,females)$p.value
}
#p.adjust(P.value, "bonferroni")
sign.tests = ifelse(P.value < 0.05, 1, 0)
sum(sign.tests)
P.value = 1:100
for (i in 1:100){
males = rnorm(10,29,10)
females = rnorm(10,30,10)
P.value[i] = t.test(males,females)$p.value
}
#p.adjust(P.value, "bonferroni")
sign.tests = ifelse(P.value < 0.05, 1, 0)
sum(sign.tests)
P.value = 1:100
for (i in 1:100){
males = rnorm(10,29,10)
females = rnorm(10,30,10)
P.value[i] = t.test(males,females)$p.value
}
#p.adjust(P.value, "bonferroni")
sign.tests = ifelse(P.value < 0.05, 1, 0)
sum(sign.tests)
P.value = 1:100
for (i in 1:100){
males = rnorm(10,29,10)
females = rnorm(10,30,10)
P.value[i] = t.test(males,females)$p.value
}
p.adjust(P.value, "bonferroni")
sign.tests = ifelse(P.value < 0.05, 1, 0)
sum(sign.tests)
P.value = 1:100
for (i in 1:100){
males = rnorm(10,30,10)
females = rnorm(10,30,10)
P.value[i] = t.test(males,females)$p.value
}
p.adjust(P.value, "bonferroni")
sign.tests = ifelse(P.value < 0.05, 1, 0)
sum(sign.tests)
P.value = 1:100
for (i in 1:100){
males = rnorm(10,30,10)
females = rnorm(10,30,10)
P.value[i] = t.test(males,females)$p.value
}
p.adjust(P.value, "bonferroni")
sign.tests = ifelse(P.value < 0.05, 1, 0)
sum(sign.tests)
P.value = 1:100
for (i in 1:100){
males = rnorm(10,30,10)
females = rnorm(10,30,10)
P.value[i] = t.test(males,females)$p.value
}
p.adjust(P.value, "bonferroni")
sign.tests = ifelse(P.value < 0.05, 1, 0)
sum(sign.tests)
P.value = 1:100
for (i in 1:100){
males = rnorm(10,30,10)
females = rnorm(10,30,10)
P.value[i] = t.test(males,females)$p.value
}
#p.adjust(P.value, "bonferroni")
sign.tests = ifelse(P.value < 0.05, 1, 0)
sum(sign.tests)
P.value = 1:100
for (i in 1:100){
males = rnorm(10,30,10)
females = rnorm(10,30,10)
P.value[i] = t.test(males,females)$p.value
}
#p.adjust(P.value, "bonferroni")
sign.tests = ifelse(P.value < 0.05, 1, 0)
sum(sign.tests)
P.value = 1:100
for (i in 1:100){
males = rnorm(10,30,10)
females = rnorm(10,30,10)
P.value[i] = t.test(males,females)$p.value
}
#p.adjust(P.value, "bonferroni")
sign.tests = ifelse(P.value < 0.05, 1, 0)
sum(sign.tests)
P.value = 1:100
for (i in 1:100){
males = rnorm(10,30,10)
females = rnorm(10,30,10)
P.value[i] = t.test(males,females)$p.value
}
#p.adjust(P.value, "bonferroni")
sign.tests = ifelse(P.value < 0.05, 1, 0)
sum(sign.tests)
P.value = 1:100
for (i in 1:100){
males = rnorm(10,29,10)
females = rnorm(10,30,10)
P.value[i] = t.test(males,females)$p.value
}
p.adjust(P.value, "bonferroni")
sign.tests = ifelse(P.value < 0.05, 1, 0)
sum(sign.tests)
P.value = 1:100
for (i in 1:100){
males = rnorm(10,29,10)
females = rnorm(10,30,10)
P.value[i] = t.test(males,females)$p.value
}
p.adjust = p.adjust(P.value, "bonferroni")
sign.tests = ifelse(p.adjust < 0.05, 1, 0)
sum(sign.tests)
P.value = 1:100
for (i in 1:100){
males = rnorm(10,29,10)
females = rnorm(10,30,10)
P.value[i] = t.test(males,females)$p.value
}
p.adjust = p.adjust(P.value, "bonferroni")
sign.tests = ifelse(p.adjust < 0.05, 1, 0)
sign.tests = ifelse(P.value < 0.05, 1, 0)
sum(sign.tests)
P.value = 1:100
for (i in 1:100){
males = rnorm(10,29,10)
females = rnorm(10,30,10)
P.value[i] = t.test(males,females)$p.value
}
#p.adjust = p.adjust(P.value, "bonferroni")
#sign.tests = ifelse(p.adjust < 0.05, 1, 0)
sign.tests = ifelse(P.value < 0.05, 1, 0)
sum(sign.tests)
P.value = 1:100
for (i in 1:100){
males = rnorm(10,29,10)
females = rnorm(10,30,10)
P.value[i] = t.test(males,females)$p.value
}
p.adjust = p.adjust(P.value, "bonferroni")
sign.tests = ifelse(p.adjust < 0.05, 1, 0)
#sign.tests = ifelse(P.value < 0.05, 1, 0)
sum(sign.tests)
P.value = 1:100
for (i in 1:100){
males = rnorm(100,29,10)
females = rnorm(100,30,10)
P.value[i] = t.test(males,females)$p.value
}
p.adjust = p.adjust(P.value, "bonferroni")
sign.tests = ifelse(p.adjust < 0.05, 1, 0)
#sign.tests = ifelse(P.value < 0.05, 1, 0)
sum(sign.tests)
P.value = 1:100
for (i in 1:100){
males = rnorm(100,29,10)
females = rnorm(100,30,10)
P.value[i] = t.test(males,females)$p.value
}
#p.adjust = p.adjust(P.value, "bonferroni")
#sign.tests = ifelse(p.adjust < 0.05, 1, 0)
sign.tests = ifelse(P.value < 0.05, 1, 0)
sum(sign.tests)
P.value = 1:100
for (i in 1:100){
males = rnorm(100,29,10)
females = rnorm(100,30,10)
P.value[i] = t.test(males,females)$p.value
}
#p.adjust = p.adjust(P.value, "bonferroni")
#sign.tests = ifelse(p.adjust < 0.05, 1, 0)
sign.tests = ifelse(P.value < 0.05, 1, 0)
sum(sign.tests)
P.value = 1:100
for (i in 1:100){
males = rnorm(100,29,10)
females = rnorm(100,30,10)
P.value[i] = t.test(males,females)$p.value
}
#p.adjust = p.adjust(P.value, "bonferroni")
#sign.tests = ifelse(p.adjust < 0.05, 1, 0)
sign.tests = ifelse(P.value < 0.05, 1, 0)
sum(sign.tests)
P.value = 1:100
for (i in 1:100){
males = rnorm(100,29,10)
females = rnorm(100,30,10)
P.value[i] = t.test(males,females)$p.value
}
#p.adjust = p.adjust(P.value, "bonferroni")
#sign.tests = ifelse(p.adjust < 0.05, 1, 0)
sign.tests = ifelse(P.value < 0.05, 1, 0)
sum(sign.tests)
P.value = 1:100
for (i in 1:100){
males = rnorm(100,29,10)
females = rnorm(100,30,10)
P.value[i] = t.test(males,females)$p.value
}
#p.adjust = p.adjust(P.value, "bonferroni")
#sign.tests = ifelse(p.adjust < 0.05, 1, 0)
sign.tests = ifelse(P.value < 0.05, 1, 0)
sum(sign.tests)
-3/4ln(1-4/3(0.7))
source("http://bioconductor.org/biocLite.R")
biocLite("DESeq")
library("DESeq")
setwd("~/MScBioinformatics/Period4/GA/stunning-garbanzo/results")
01_BH_counts  = read.delim("transcriptomics/BH/counts/01_BH_counts.tab/", header = F, row.names = 1)
BH_counts_01  = read.delim("transcriptomics/BH/counts/01_BH_counts.tab/", header = F, row.names = 1)
BH_counts_01  = read.delim("transcriptomics/BH/counts/01_BH_counts.tab", header = F, row.names = 1)
BH_counts_01.head()
head(BH_counts_01)
install.packages("rnaseqWrapper")
library(rnaseqWrapper)
help("rnaseqWrapper")
help("mergeCountFiles")
mergeCountFiles(transcriptomics/BH/counts/, fileSep="\t")
mergeCountFiles("transcriptomics/BH/counts/", fileSep="\t")
setwd("~/MScBioinformatics/Period4/GA/stunning-garbanzo/results/transcriptomics/Counts")
files = list.files(path=".")
file1 = read.table(files[1], col.names=c("gene_id",files[1]))
file2 = read.table(files[2], col.names=c("gene_id",files[2]))
out.file = merge (file1, file2, by=c("gene_id"))
View(out.file)
for(i in 3:length(files))
{
file = read.table(files[i],col.names=c("gene_id",files[i]))
out.file <- merge(out.file, file, by=c("gene_id"))
}
View(out.file)
write.table(out.file, file = "htseq_all_sample_count.tsv",sep="\t", row.names = FALSE)
files = list.files(path=".")
file1 = read.table(files[1], col.names=c("gene_id",files[1]))
file2 = read.table(files[2], col.names=c("gene_id",files[2]))
out.file = merge (file1, file2, by=c("gene_id"))
for(i in 3:length(files))
{
file = read.table(files[i],col.names=c("gene_id",files[i]))
out.file <- merge(out.file, file, by=c("gene_id"))
}
write.table(out.file, file = "htseq_all_sample_count.tsv",sep="\t", row.names = FALSE)
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("DESeq2")
library("DESeq2")
setwd("~/MScBioinformatics/Period4/GA/stunning-garbanzo/results/transcriptomics/Counts")
counts = read.delim("htseq_all_sample_count.tsv", header=F, row.names=1)
head(counts)
colnames(counts) = c("BH1", "SR1", "BH2", "SR2", "BH3", "SR3")
head(counts)
my.design <- data.frame(
row.names = colnames( counts ),
condition = c( "BH", "Serum", "BH", "Serum","BH", "Serum"),
libType = c( "paired-end", "paired-end","paired-end","paired-end","paired-end","paired-end" )
)
View(my.design)
conds <- factor(my.design$condition)
cds <- newCountDataSet( counts, conds )
cds <- newCountDataSet(counts, conds)
counts
help("newCountDataSet")
sapply(counts, mode)
sapply(counts,class)
numc <- sapply(data, is.factor)
numc
numc <- sapply(counts, is.factor)
numc
numc <- sapply(counts, is.factor)
counts[numc] <- lapply(counts[numc], function(x) as.numeric(as.character(x)))
counts[!complete.cases(counts),]
counts <- na.omit(counts)
counts[!complete.cases(counts),]
sapply(counts, mode)
sapply(counts,class)
counts = read.delim("htseq_all_sample_count.tsv", header=F, row.names=1)
numc <- sapply(counts, is.factor)
counts[numc] <- lapply(counts[numc], function(x) as.numeric(as.character(x)))
counts <- na.omit(counts)
head(counts)
colnames(counts) = c("BH1", "SR1", "BH2", "SR2", "BH3", "SR3")
my.design <- data.frame(
row.names = colnames( counts ),
condition = c( "BH", "Serum", "BH", "Serum","BH", "Serum"),
libType = c( "paired-end", "paired-end","paired-end","paired-end","paired-end","paired-end" )
)
conds <- factor(my.design$condition)
cds <- newCountDataSet(counts, conds)
View(cds)
cds
cds <- estimateSizeFactors(cds)
cds
cds <- estimateDispersions(cds)
cds
pdf("DESeq-dispersion_estimates.pdf")
plot(
rowMeans( counts( cds, normalized=TRUE ) ),
fitInfo(cds)$perGeneDispEsts,
pch = '.', log="xy"
)
plot(cds)
View(my.design)
View(cds)
library("DESeq2")
counts = read.delim("htseq_all_sample_count.tsv", header=F, row.names=1)
View(counts)
numc <- sapply(counts, is.factor)
counts[numc] <- lapply(counts[numc], function(x) as.numeric(as.character(x)))
counts <- na.omit(counts)
colnames(counts) = c("BH1", "SR1", "BH2", "SR2", "BH3", "SR3")
my.design <- data.frame(
row.names = colnames( counts ),
condition = c( "BH", "Serum", "BH", "Serum","BH", "Serum"),
libType = c( "paired-end", "paired-end","paired-end","paired-end","paired-end","paired-end" )
)
View(my.design)
dds <- DESeqDataSetFromMatrix(countData = counts,
colData = my.design,
design = ~ condition)
library("DESeq2")
dds <- DESeqDataSetFromMatrix(countData = counts,
colData = my.design,
design = ~ condition)
dds <- DESeqDataSetFromMatrix(countData = counts, colData = my.design, design = ~ condition)
library("DESeq2")
library(DESeq2)
